
################################################################################
#   GLOBAL   ###################################################################
################################################################################

# Application
position.left=180
position.top=80
position.width=1080
position.height=740

# Output
output.vertical.size=200
output.initial.hide=1
output.scroll=1
output.wrap=1
clear.before.execute=1
output.scroll=2 # stop at last row
#end.at.last.line=1
output.cache.layout=0 # disable caching

# Indentation
indent.size=4
indent.automatic=1
indent.opening=0
indent.closing=0
tabsize=4
use.tabs=0
view.whitespace=1
view.indentation.whitespace=1
view.indentation.guides=1
view.indentation.examine=3
highlight.indentation.guides=1

# Autocompletion
autocompleteword.automatic=0
autocomplete.choose.single=1
autocompleteword.incremental=1

# Additional source-files
source.files.text=*.txt;*.log;*.tmp
source.files.config=*.conf;*.fdi
source.files.document=*.tex;*.bib
source.files.script=*.sh;*.vbs;*.js;*.py;*.pl;*.rb;*.cgi;*.lua;*.bat;*.cmd
source.files.web=*.html;*.htm;*.css;*.php;*xml
source.files.programming=*.asm;*.c;*.cc;*.cpp;*.cxx;*.cs;*.asp;*.aspx;*.h;*.hh;*.hxx;*.hpp;*.sql;*.java;*.erl;*.vb;*.S;*.ld
source.files.make=Make*;make*;*.mak;
source.files.misc=foo;*.foo;bar;*.bar
source.files=\
$(source.files.text);\
$(source.files.config);\
$(source.files.document);\
$(source.files.script);\
$(source.files.web);\
$(source.files.programming);\
$(source.files.make);\
$(source.files.misc)

# Editing
strip.trailing.spaces=1
ensure.final.line.end=1
ensure.consistent.line.ends=1

# User defined key commands
user.shortcuts=\
Ctrl+Shift+V|IDM_PASTEANDDOWN|\
Ctrl+Alt+Left|IDM_PREVFILE|\
Ctrl+Alt+Right|IDM_NEXTFILE|

# Context menu
user.context.menu=\
||\
Next File|IDM_NEXTFILE|\
Prev File|IDM_PREVFILE|

# Help
command.scite.help=firefox "file://$(SciteDefaultHome)/SciTEDoc.html"

# Unsorted
open.dialog.in.file.directory=1 # set open dialog to current dir
check.if.already.open=1 # one instance of SciTE only
open.asynchronous=1
split.vertical=0
tabbar.visible=1
tabbar.hide.one=0
tabbar.multiline=1
statusbar.visible=1
line.margin.visible=1
line.margin.width=4
margin.width=16
buffered.draw=1
use.palette=0
caret.period=500

edge.column=80
edge.mode=1

braces.check=1
braces.sloppy=1
braces.*.style=1

are.you.sure=1
default.file.ext=.cxx

title.full.path=1
title.show.buffers=1

save.recent=1
save.session=1
load.on.activate=1 # reload file and prompt on activation(useful if file is modified by an external program)
reload.preserves.undo=1

buffers=24
pathbar.visible=1
cache.layout=3 # cache whole document

# slows down SciTE
wrap=1
wrap.style=1
wrap.aware.home.end.keys=1
output.wrap=1

find.replace.advanced=1

eol.mode=LF
eol.auto=1
clear.before.execute=1

code.page=0
output.codepage=0

properties.directory.enable=1 # lookup

################################################################################
#   SCRIPTS   ##################################################################
################################################################################

ext.lua.startup.script=$(SciteUserHome)/.scite/functions.lua
ext.lua.auto.reload=1

# External go
command.name.11.*=External go
command.11.*=ExternalGo
command.subsystem.11.*=3
command.mode.11.*=savebefore:no
command.shortcut.11.*=Ctrl+F5

# External debug
command.name.12.*=Debug (gdb)
command.12.*=ExternalDebug
command.subsystem.12.*=3
command.mode.12.*=savebefore:no
command.shortcut.12.*=Ctrl+F8

# Revision control commit
command.name.13.*=Revision control commit
command.13.*=RevisionControlCommit
command.subsystem.13.*=3
command.mode.13.*=savebefore:yes
command.shortcut.13.*=Ctrl+Shift+C

# Revision control update
command.name.14.*=Revision control update
command.14.*=RevisionControlUpdate
command.subsystem.14.*=3
command.mode.14.*=savebefore:yes
command.shortcut.14.*=Ctrl+Shift+U

# Box comment header
command.name.15.*=Make header
command.15.*=BoxCommentHeader
command.subsystem.15.*=3
command.mode.15.*=savebefore:no
command.shortcut.15.*=Ctrl+B

# Format code
command.name.16.*=Format code
command.16.*=FormatCode
command.subsystem.16.*=3
command.mode.16.*=savebefore:no
command.shortcut.16.*=Ctrl+M


#####################################
#   API's for different languages   #
#####################################

# lua5.api              Lua C API calls
# lualib5.api           Lua calls without annotations
# lualib5_annot.api     Lua calls with annotations

APILocation=$(SciteUserHome)/.scite/api
api.*.c=$(APILocation)/c.api
api.*.cc=$(APILocation)/cpp.api;$(APILocation)/c.api
api.*.cpp=$(APILocation)/cpp.api;$(APILocation)/c.api
api.*.cs=$(APILocation)/cs.api
api.*.lua=$(APILocation)/lua5.api;$(APILocation)/lualib5.api;$(APILocation)/SciTELua.api
api.*.py=$(APILocation)/python.api
api.*.java=$(APILocation)/java.api
api.*.pl=$(APILocation)/perl.api
api.*.php=$(APILocation)/php.api;$(APILocation)/php.rijo.api


################################################################################
#   BUILD SETTINGS   ###########################################################
################################################################################

# C/C++
ccopts=-pedantic -O2 -Wall -Werror -std=c99
cc=gcc $(ccopts) -c $(FileNameExt)
ccc=g++ $(ccopts) -c $(FileNameExt)
find_makefile=if [ ! -f ./Makefile ] && [ ! -f ./makefile ]; then cd .. ; fi

command.compile.*.c=echo "  CC    $(FileName).o" && $(cc)
command.compile.*.cpp=echo "  CC    $(FileName).o" && $(ccc)
command.go.*.c=./$(FileName) $(1) $(2) $(3) $(4)
command.go.*.cpp=./$(FileName) $(1) $(2) $(3) $(4)
command.build.*.c=$(find_makefile) && make clean all
command.build.*.cpp=$(find_makefile) && make clean all
command.build.*.h=$(find_makefile) && make clean all
command.build.*.hpp=$(find_makefile) && make clean all
command.go.subsystem.*.c=0
command.go.subsystem.*.cpp=0

additional.typedef=v2 v3 v4 m2 m3 m4 int8_t int16_t int32_t uint8_t uint16_t uint32_t size_t v2_t v3_t point_t rect_t
keywords.$(file.patterns.cpp)=$(keywordclass.cpp) $(additional.typedef)

# Makefile
command.build.Makefile=make clean all
command.build.makefile=make clean all

# Bash
command.go.*.sh=./$(FileNameExt) $(1) $(2) $(3) $(4)

# Python
command.go.*.py=python -u $(FileNameExt) "$(1)" "$(2)" "$(3)" "$(4)"

# Lua
command.compile.*.lua=luac -o "$(FileName).luc" "$(FileNameExt)"
command.go.*.lua=lua $(FileNameExt) $(1) $(2) $(3) $(4)

# Tex
find_tex_document=grep -l "\\documentclass" ./*tex | head -n 1 | sed "s/\(.*\)\.tex/\1/"
generate_bibtex=bibtex `$(find_tex_document)`.aux && pdflatex `$(find_tex_document)`.tex
bibtex_in_use=if [ "`grep \\bibliography \`$(find_tex_document)\`.tex`" ]; then $(generate_bibtex); fi
command.build.*.tex=pdflatex `$(find_tex_document)`.tex && $(bibtex_in_use) && pdflatex `$(find_tex_document)`.tex && echo && echo "Done!"
command.go.*.tex=evince `$(find_tex_document)`.pdf
command.build.*.bib=$(command.build.*.tex)
command.go.*.bib=$(command.go.*.tex)


################################################################################
#   OVERRIDE DEFAULT LANGUAGE SETTINGS   #######################################
################################################################################

use.tabs.*.css=0
use.tabs.*.asp=1
use.tabs.Makefile=1


################################################################################
#   FONTS   ####################################################################
################################################################################

font.monospace=font:!ProggyCleanTT CE,size:12,notbold
font.base=$(font.monospace)
font.comment=$(font.monospace),italics
font.text=$(font.monospace)
font.output=font:!Nimbus Mono L,size:8,bold


################################################################################
#   COLORS   ###################################################################
################################################################################

# Misc colors
selection.alpha=30
selection.back=#000000
fold.margin.colour=#090909
fold.margin.highlight.colour=#090909
caret.fore=#ffffff
edge.colour=#222222
selection.fore=#999999
selection.back=#ffffff
whitespace.fore=#555555
error.marker.fore=#ff0000
error.marker.fore=#000000

# Default colors
color.default.fore=fore:#ffffff
color.default.back=back:#000000
color.default=$(color.default.fore),$(color.default.back)

# Output colors (custom variables)
color.output.default=$(font.output),$(color.default)
color.output.filename=$(font.output),fore:#79973F,$(color.default.back),underlined
color.output.linenumber=$(font.output),fore:#654321,$(color.default.back)
color.output.description=$(font.output),fore:#A2C257,$(color.default.back)
color.output.assert=$(font.output),fore:#A29207,$(color.default.back),underlined
color.output.command=$(font.output),fore:#666666,$(color.default.back)
color.output.line=$(font.output),fore:#333333,$(color.default.back)
color.output.parse_error=$(font.output),fore:#bb3333,$(color.default.back)

# Editor colors (custom variables)
color.unknown=$(font.base),fore:#FF00FF,back:#222222,bold
color.text.default=$(font.base),$(color.default)
color.text.comment.line=$(font.comment),fore:#55aa55,$(color.default.back)
color.text.comment.box=$(font.comment),fore:#55aa75,$(color.default.back)
color.text.comment.doc=$(font.comment),fore:#55aa95,$(color.default.back)
color.text.number=$(font.text),fore:#ff73bb,$(color.default.back)
color.text.keyword=$(font.text),fore:#00A0C0,$(color.default.back)
color.text.variable=$(font.text),fore:#e57e45,$(color.default.back)
color.text.method=$(font.text),fore:#bc45cb,$(color.default.back)
color.text.class=$(font.text),fore:#999999,$(color.default.back)
color.text.symbol=$(font.text),fore:#cccccc,$(color.default.back)
color.text.char=$(font.text),fore:#dddddd,back:333333
color.text.string=$(font.text),fore:#cccccc,back:222222
color.text.preproc=$(font.text),fore:#D0D055,$(color.default.back)
color.error=$(font.text),fore:#FFFF00,back:#A05050,eolfilled
color.foo==$(font.text),fore:#FF0000,back:#FFFFFF
color.indentation.guide=fore:#004755,back:#000000
color.line.number=fore:#FFFFFF,back:#000000
color.brace.highlight.complete=fore:#51C151,$(color.default.back),bold
color.brace.highlight.incomplete=fore:#C15151,$(color.default.back),bold


###############################################
#   Global default styles for all languages   #
###############################################

# Default
style.*.0=$(color.text.default)
style.*.32=$(color.text.default)
# Line number
style.*.33=$(color.line.number)
# Brace complete highlight
style.*.34=$(color.brace.highlight.complete)
# Brace incomplete highlight
style.*.35=$(color.brace.highlight.incomplete)
# Control characters
style.*.36=$(color.unknown)
# Indentation guides (vertical dashed lines)
style.*.37=$(color.indentation.guide)


### TEMP #######################################################################
# Override specific languages (because wildcard doesn't)
style.props.34=$(color.brace.highlight.complete)
style.props.35=$(color.brace.highlight.incomplete)
style.python.34=$(color.brace.highlight.complete)
style.python.35=$(color.brace.highlight.incomplete)
style.hypertext.34=$(color.brace.highlight.complete)
style.hypertext.35=$(color.brace.highlight.incomplete)
style.makefile.34=$(color.brace.highlight.complete)
style.makefile.35=$(color.brace.highlight.incomplete)
style.lisp.34=$(color.brace.highlight.complete)
style.lisp.35=$(color.brace.highlight.incomplete)
style.tex.34=$(color.brace.highlight.complete)
style.tex.35=$(color.brace.highlight.incomplete)
### TEMP #######################################################################

# Set everything else to a default color
style.*.1=$(color.unknown)
style.*.2=$(color.unknown)
style.*.3=$(color.unknown)
style.*.4=$(color.unknown)
style.*.5=$(color.unknown)
style.*.6=$(color.unknown)
style.*.7=$(color.unknown)
style.*.8=$(color.unknown)
style.*.9=$(color.unknown)
style.*.10=$(color.unknown)
style.*.11=$(color.unknown)
style.*.12=$(color.unknown)
style.*.13=$(color.unknown)
style.*.14=$(color.unknown)
style.*.15=$(color.unknown)
style.*.16=$(color.unknown)
style.*.17=$(color.unknown)
style.*.18=$(color.unknown)
style.*.19=$(color.unknown)
style.*.20=$(color.unknown)
style.*.21=$(color.unknown)
style.*.22=$(color.unknown)
style.*.23=$(color.unknown)
style.*.24=$(color.unknown)
style.*.25=$(color.unknown)
style.*.26=$(color.unknown)
style.*.27=$(color.unknown)
style.*.28=$(color.unknown)
style.*.29=$(color.unknown)
style.*.30=$(color.unknown)
style.*.31=$(color.unknown)


#################################
#   Error list  (output pane)   #
#################################

# Main eror text
style.errorlist.0=$(color.output.default)
# Line number
style.errorlist.1=$(color.output.linenumber)
# Error: filenamne
style.errorlist.2=$(color.output.filename)
# Console output
style.errorlist.4=$(color.output.command)
# Error assert (STDOUT?): <executable>: <source>:<line>
style.errorlist.8=$(color.output.assert)
# Uncertain of this: <text><whitespace><number>
style.errorlist.9=$(color.output.default)
# Line (-----)
style.errorlist.12=$(color.output.line)
# Uncertain of this: Parse error: bla bla (PHP)
style.errorlist.14=$(color.output.parse_error)
# Error: description
style.errorlist.21=$(color.output.description)

##################
#   Properties   #
##################

# Comment
style.props.1=$(color.text.comment.line)
# Assignment operator
style.props.3=$(color.text.symbol)
# Identifiers (variable names, etc)
style.props.5=$(color.text.variable)

###############
#   C++ / C   #
###############

# Comment
style.cpp.1=$(color.text.comment.box)
# Line Comment
style.cpp.2=$(color.text.comment.line)
# Doc comment
style.cpp.3=$(color.text.comment.doc)
# Number
style.cpp.4=$(color.text.number)
# Keyword (int,if,return,etc)
style.cpp.5=$(color.text.keyword)
# Double quoted string
style.cpp.6=$(color.text.string)
# Single quoted string
style.cpp.7=$(color.text.char)
# UUIDs (only in IDL)
style.cpp.8=$(color.unknown)
# Preprocessor
style.cpp.9=$(color.text.preproc)
# Operators
style.cpp.10=$(color.text.symbol)
# Identifiers (variables,function names,etc)
style.cpp.11=$(color.text.variable)
# End of line where string is not closed
style.cpp.12=$(color.text.string),eolfilled

##############
#   Python   #
##############

# Comment
style.python.1=$(color.text.comment.line)
# Number
style.python.2=$(color.text.number)
# String
style.python.3=$(color.text.char)
# Single quoted string
style.python.4=$(color.text.string)
# Keyword
style.python.5=$(color.text.keyword)
# Triple quotes
style.python.6=$(color.text.comment.box)
# Triple double quotes
style.python.7=$(color.text.string)
# Class name definition
style.python.8=$(color.text.class)
# Function or method name definition
style.python.9=$(color.text.method)
# Operators
style.python.10=$(color.text.symbol)
# Identifiers
style.python.11=$(color.text.variable)
# Comment-blocks
style.python.12=$(color.text.comment.box)
# End of line where string is not closed
style.python.13=$(color.text.string),eolfilled

################
#   Makefile   #
################

# Default
style.makefile.0=$(color.text.default)
# Comment: #
style.makefile.1=$(color.text.comment.line)
# Pre-processor or other comment: !
style.makefile.2=$(color.text.preproc)
# Variable: $(x)
style.makefile.3=$(color.text.keyword)
# Operator
style.makefile.4=$(color.text.symbol)
# Target
style.makefile.5=$(color.text.variable)
# Error
style.makefile.9=$(color.error)
# Identifiers (functions, etc.)
style.makefile.11=$(color.text.method)

############
#   Bash   #
############

# Error
style.bash.1=$(color.error)
# Comment
style.bash.2=$(color.text.comment.line)
# Number
style.bash.3=$(color.text.number)
# Keyword
style.bash.4=$(color.text.keyword)
# Double quoted string
style.bash.5=$(color.text.string)
# Single quoted string
style.bash.6=$(color.text.char)
# Operators
style.bash.7=$(color.text.symbol)
# Identifiers (functions, etc.)
style.bash.8=$(color.text.method)
# Scalars: $var
style.bash.9=$(color.text.variable)
# Parameter expansion: ${var}
style.bash.10=$(color.text.variable)
# Back Ticks
style.bash.11=$(color.text.method)

############
#   Conf   #
############

# Comment (SCE_CONF_COMMENT)
style.conf.1=$(color.text.comment.line)
# Number (SCE_CONF_NUMBER)
style.conf.2=$(color.text.number)
#
style.conf.4=$(color.text.variable)
#
style.conf.5=$(color.text.variable)
# identifier (SCE_CONF_IDENTIFIER)
style.conf.9=$(color.text.preproc)
# Double quoted string (SCE_CONF_STRING)
style.conf.6=$(color.text.string)
# Operators (SCE_CONF_OPERATOR)
style.conf.7=$(color.text.symbol)
# IP address (SCE_CONF_IP)
style.conf.8=$(color.text.keyword)
# Identifiers (functions, etc.)
style.conf.11=$(color.text.method)

###########
#   Lua   #
###########

# Block comment (Lua 5.0)
style.lua.1=$(color.text.comment.box)
# Line comment
style.lua.2=$(color.text.comment.line)
# Doc comment -- Not used in Lua (yet?)
style.lua.3=$(color.text.comment.doc)
# Number
style.lua.4=$(color.text.number)
# Keyword
style.lua.5=$(color.text.keyword)
# (Double quoted) String
style.lua.6=$(color.text.string)
# Character (Single quoted string)
style.lua.7=$(color.text.char)
# Literal string
style.lua.8=$(color.text.string)
# Preprocessor (obsolete in Lua 4.0 and up)
style.lua.9=$(color.text.preproc)
# Operators
style.lua.10=$(color.text.symbol)
# Identifiers (variables)
style.lua.11=$(color.text.variable)
# End of line where string is not closed
style.lua.12=$(color.text.string),eolfilled
# Identifiers (functions)
style.lua.13=$(color.text.method)
# Class member calls
style.lua.14=$(color.text.class)
style.lua.15=$(color.text.class)

##############
#   Erlang   #
##############

# Comment
style.erlang.1=$(color.text.comment.line)
# Variable
style.erlang.2=$(color.text.variable)
# Number
style.erlang.3=$(color.text.number)
# Keyword
style.erlang.4=$(color.text.keyword)
# String
style.erlang.5=$(color.text.string)
# Operator
style.erlang.6=$(color.text.symbol)
# Atom
style.erlang.7=$(color.text.method)
# function name (in export)
style.erlang.8=$(color.text.method)
# Character
style.erlang.9=$(color.text.char)
# Macro
style.erlang.10=$(color.text.preproc)
# Record
style.erlang.11=$(color.text.preproc)
# Node name
style.erlang.13=$(color.text.preproc)
# parse error
style.erlang.31=$(color.error)

#############
#   LaTeX   #
#############

# Default (comments)
style.tex.0=$(color.text.comment.line)
# Special
style.tex.1=$(color.text.symbol)
# Group
style.tex.2=$(color.text.symbol)
# Symbol(percent sign)
style.tex.3=$(color.text.symbol)
# Command
style.tex.4=$(color.text.keyword)
# Text
style.tex.5=$(color.text.default)

###########
#   SQL   #
# #########

# Comment
style.sql.1=$(color.text.comment.box)
# Line Comment
style.sql.2=$(color.text.comment.line)
# Doc comment
style.sql.3=$(color.text.comment.doc)
# Number
style.sql.4=$(color.text.number)
# Keyword
style.sql.5=$(color.text.keyword)
# Double quoted string
style.sql.6=$(color.text.string)
# Single quoted string
style.sql.7=$(color.text.char)
# Operators
style.sql.10=$(color.text.symbol)
# Identifiers
style.sql.11=$(color.text.variable)

###########
#   PHP   #
###########

# Start/end tags
style.hypertext.18=$(color.text.preproc)
# PHP complex variable
#style.hypertext.104=$(color.foo)
# Default
style.hypertext.118=$(color.text.default)
# Double quoted String
style.hypertext.119=$(color.text.string)
# Single quoted string
style.hypertext.120=$(color.text.char)
# Keyword
style.hypertext.121=$(color.text.keyword)
# Number
style.hypertext.122=$(color.text.number)
# Variable
style.hypertext.123=$(color.text.variable)
# Comment
style.hypertext.124=$(color.text.comment.box)
# One line comment
style.hypertext.125=$(color.text.comment.line)
# PHP variable in double quoted string
style.hypertext.126=$(color.text.variable)
# PHP operator
style.hypertext.127=$(color.text.symbol)

###########
#   XML   #
###########

# Default
style.xml.0=$(color.default.fore)
# Tags
style.xml.1=$(color.text.keyword)
# Unknown Tags
style.xml.2=$(color.foo)
# Attributes
style.xml.3=$(color.text.variable)
# Unknown Attributes
style.xml.4=$(color.foo)
# Numbers
style.xml.5=$(color.text.number)
# Double quoted strings
style.xml.6=$(color.text.string)
# Single quoted strings
style.xml.7=$(color.text.char)
# Other inside tag
style.xml.8=$(color.text.default)
# Comment
style.xml.9=$(color.text.comment.box)
# Entities
style.xml.10=$(color.foo)
# XML style tag ends '/>'
style.xml.11=$(color.text.keyword)
# XML identifier start '<?'
style.xml.12=$(color.text.keyword)
# XML identifier end '?>'
style.xml.13=$(color.text.keyword)
# CDATA
style.xml.17=$(color.foo)
# Question
style.xml.18=$(color.foo)
# Unquoted Value
style.xml.19=$(color.foo)
# SGML tags <! ... >
style.xml.21=$(color.text.keyword)
# SGML command
style.xml.22=$(color.foo)
# SGML 1st param
style.xml.23=$(color.foo)
# SGML double string
style.xml.24=$(color.foo)
# SGML single string
style.xml.25=$(color.foo)
# SGML error
style.xml.26=$(color.foo)
# SGML special (#xxxx type)
style.xml.27=$(color.foo)
# SGML entity
style.xml.28=$(color.foo)
# SGML comment
style.xml.29=$(color.foo)
# SGML block
style.xml.31=$(color.foo)

############
#   Perl   #
############

# Error
style.perl.1=$(color.error)
# Comment
style.perl.2=$(color.text.comment.line)
# POD: = at beginning of line
#style.perl.3=$(color.foo)
# Number
style.perl.4=$(color.text.number)
# Keyword
style.perl.5=$(color.text.keyword)
# Double quoted string
style.perl.6=$(color.text.string)
# Single quoted string
style.perl.7=$(color.text.char)
# Operators
style.perl.10=$(color.text.symbol)
# Identifiers (functions, etc.)
style.perl.11=$(color.text.method)
# Scalars: $var
style.perl.12=$(color.text.variable)
# Array: @var
style.perl.13=$(color.text.variable)
# Hash: %var
style.perl.14=$(color.text.variable)
# Symbol table: *var
style.perl.15=$(color.text.variable)
# Regex: /re/ or m{re}
style.perl.17=$(color.text.preproc)
# Substitution: s/re/ore/
style.perl.18=$(color.text.preproc)
# Long Quote (qq, qr, qw, qx) -- obsolete: replaced by qq, qx, qr, qw
style.perl.19=$(color.text.string)
# Back Ticks
style.perl.20=$(color.text.class)
# Single quoted string, generic
style.perl.26=$(color.text.char)
# qq = Double quoted string
style.perl.27=$(style.perl.6)
# qx = Back ticks
style.perl.28=$(style.perl.20)
# qr = Regex
style.perl.29=$(style.perl.17)
# qw = Array
style.perl.30=$(style.perl.13)

###########
#   CSS   #
###########

# White space: Visible only in View Whitespace mode (or if it has a back color)
style.css.0=$(color.text.default)
# Selector (HTML tag)
style.css.1=$(color.text.keyword)
# Class selector ([HtmlTag].classSelector)
style.css.2=$(color.text.class)
# Pseudo class (HtmlTag:pseudoClass)
style.css.3=$(color.text.method)
# Unknown Pseudo class
#style.css.4=$(color.foo)
# Operator
style.css.5=$(color.text.symbol)
# CSS1 Property
style.css.6=$(color.text.variable)
# Unknown Property
style.css.7=$(color.error)
# Value
style.css.8=$(color.text.default)
# Comment
style.css.9=$(color.text.comment.box)
# ID selector (#IdSel)
style.css.10=$(color.text.class)
# Important
style.css.11=$(color.text.preproc)
# At-rule (@)
style.css.12=$(color.text.preproc)
# Double quoted strings
style.css.13=$(color.text.string)
# Single quoted strings
style.css.14=$(color.text.char)
# CSS2 Property
style.css.15=$(color.text.variable)
# Attribute selection ([att='val'])
#style.css.16=$(color.foo)

#################
#   Assembler   #
#################

# Comment
style.asm.1=$(color.text.comment.line)
# Number
style.asm.2=$(color.text.number)
# String
style.asm.3=$(color.text.string)
# Operator
style.asm.4=$(color.text.symbol)
# Identifier
style.asm.5=$(color.text.variable)
# CPU instruction
style.asm.6=$(color.text.method)
# FPU instruction
style.asm.7=$(color.text.method)
# Register
style.asm.8=$(color.text.class)
# assembler Directive (goto, etc)
style.asm.9=$(color.text.keyword)
# assembler Directive Operand
style.asm.10=$(color.text.symbol)
# Comment block (GNU as /*...*/ syntax, unimplemented)
style.asm.11=$(color.text.comment.box)
# Character/String (single quote) (also character prefix in GNU as)
style.asm.12=$(color.text.char)
# End of line where string is not closed
style.asm.13=$(color.text.string),eolfilled
# Extended instructions
style.asm.14=$(color.text.method)

############
#   HTML   #
############

# Text
style.hypertext.0=$(color.text.default)
# Tags
style.hypertext.1=$(color.text.keyword)
# Unknown Tags
style.hypertext.2=$(color.text.keyword)
# Attributes
style.hypertext.3=$(color.text.variable)
# Unknown Attributes
style.hypertext.4=$(color.text.variable)
# Numbers
style.hypertext.5=$(color.text.number)
# Double quoted strings
style.hypertext.6=$(color.text.string)
# Single quoted strings
style.hypertext.7=$(color.text.char)
# Other inside tag
style.hypertext.8=$(color.text.default)
# Comment
style.hypertext.9=$(color.text.comment.box)
# Entities (such as "&nbsp;")
style.hypertext.10=$(color.text.variable)

# SGML tags <! ... >, PUBLIC
style.hypertext.21=$(color.text.preproc)
# SGML command (DOCTYPE)
style.hypertext.22=$(color.text.preproc)
# SGML 1st param (HTML)
style.hypertext.23=$(color.text.preproc)
# SGML double string
style.hypertext.24=$(color.text.string)
# SGML single string
style.hypertext.25=$(color.text.char)
# SGML error
#style.hypertext.26=fore:#800000,back:#FF6666
# SGML special (#xxxx type)
#style.hypertext.27=fore:#3366FF,back:#EFEFFF
# SGML entity
#style.hypertext.28=fore:#333333,back:#EFEFFF
# SGML comment
style.hypertext.29=$(color.comment.line)
# SGML block
#style.hypertext.31=fore:#000066,back:#CCCCE0

############
#    ASP   #
############

# ASP <% ... %>
style.hypertext.15=$(color.text.preproc)
# ASP <% ... %>
style.hypertext.16=$(color.text.preproc)

############
#   LISP   #
############

# White space
style.lisp.0=$(color.text.default)
# Line Comment
style.lisp.1=$(color.text.comment.line)
# Number
style.lisp.2=$(color.text.number)
# Keyword
style.lisp.3=$(color.text.keyword)
# String
style.lisp.6=$(color.text.string)
# Identifiers
style.lisp.9=$(color.text.variable)
# Operators
style.lisp.10=$(color.text.symbol)
# End of line where string is not closed
style.lisp.27=$(color.text.default),eolfilled
